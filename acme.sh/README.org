* 使用 acme.sh 申请 Let's Encrypt 泛域名证书
** 阿里云
*** 预备参数
 key: 
 secret:
 domain:
*** 生成证书
 #+BEGIN_SRC sh
 curl  https://get.acme.sh | sh
 export Ali_Key=<key>
 export Ali_Secret=<secret>
 acme.sh --issue --dns dns_ali -d <domain> -d *.<domain>
 if [ ! -d /etc/nginx/ssl ]; then mkdir /etc/nginx/ssl; fi
 cp ~/.acme.sh/<domain>/fullchain.cer /etc/nginx/ssl/fullchain.cer
 cp ~/.acme.sh/<domain>/wraaagh.site.key /etc/nginx/ssl/<domain>.key
 acme.sh --installcert -d <domain> --key-file /etc/nginx/ssl/<domain>.key --fullchain-file /etc/nginx/ssl/fullchain.cer --reloadcmd "service nginx force-reload"
 #+END_SRC
*** nginx 配置
#+BEGIN_SRC
# /etc/nginx/snippets/ssl-params.conf

server_tokens   off;

ssl on;

ssl_session_cache        shared:SSL:10m;
ssl_session_timeout      60m;

ssl_session_tickets      on;

ssl_stapling             on;
ssl_stapling_verify      on;

resolver                 8.8.4.4 8.8.8.8  valid=300s;
resolver_timeout         10s;
ssl_prefer_server_ciphers on;

ssl_certificate          /etc/nginx/ssl/fullchain.cer;
ssl_certificate_key      /etc/nginx/ssl/<domain>.key;

ssl_protocols            TLSv1 TLSv1.1 TLSv1.2;

ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:ECDHE-RSA-AES128-GCM-SHA256:AES256+EECDH:DHE-RSA-AES128-GCM-SHA256:AES256+EDH:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";

add_header Strict-Transport-Security "max-age=31536000;includeSubDomains;preload";
add_header  X-Frame-Options  deny;
add_header  X-Content-Type-Options  nosniff;
add_header x-xss-protection "1; mode=block";
add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' blob: https:; connect-src 'self
#+END_SRC

#+BEGIN_SRC
# /etc/nginx/sites-available/<domain>.conf

server {
    listen 80;
    listen [::]:80;

    server_name <domain>;
    return 301 https://$server_name$request_uri;
}
server {
    listen 443;
    listen [::]:443;

    include snippets/ssl-params.conf;
    root /usr/share/nginx/html;

    server_name <domain>;

    location / {

    }

    if ($host != '<domain>' ) {
        rewrite ^/(.*)$ https://<domain>/$1 permanent;
    }
}
#+END_SRC
